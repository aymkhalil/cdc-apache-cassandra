plugins {
    id 'java'
    id 'application'
    id 'com.google.cloud.tools.jib'
    id "com.gorylenko.gradle-git-properties"
    id("com.github.johnrengelman.shadow")
    id("io.micronaut.application") version "1.2.0"
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.datastax.cassandra.cdc.consumer.*")
    }
}

application {
    mainClass.set("$mainClassName")
}

jar {
    manifest {
        attributes "Main-Class": mainClassName
    }
    zip64=true
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.jar.dependsOn project(':common').jar

compileTestJava {
    options.compilerArgs += '-parameters'
}

dependencies {
    implementation project(':common')

    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")

    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    runtimeOnly("ch.qos.logback:logback-classic")

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    implementation("javax.annotation:javax.annotation-api")

    implementation("io.micronaut.cassandra:micronaut-cassandra:3.1.0")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("tech.allegro.schema.json2avro:converter:0.2.2")

}

run {
    if ( project.hasProperty('args') ) {
        args project.args.split('\\s+')
    }
    //jvmArgs = [ "-Djavax.net.debug=all" ]
    mainClass = "$mainClassName"
}

jib {
    from {
        image = 'openjdk:alpine'
    }
    to {
        image = project.image
        credHelper = 'osxkeychain'
        tags = [ project.version, 'latest' ]
    }
    container {
        jvmFlags = ['-Xmx300m',
                    '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-XX:MaxRAMFraction=2',
                    '-XX:+ExitOnOutOfMemoryError',
                    '-Xdebug', '-Xnoagent', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
        ]
        mainClass = mainClassName
        ports = ['8080', '8081']
        labels = [ description:'Cassandra CDC Pulsar onsumer']
    }
}