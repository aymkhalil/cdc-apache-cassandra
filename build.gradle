buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/sponiro/gradle-plugins'
        }
    }
    dependencies {
        classpath group: 'de.fanero.gradle.plugin.nar', name: 'gradle-nar-plugin', version: '0.4'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "net.ltgt.apt-idea" version "0.20"

    id "com.dorongold.task-tree" version "1.3.1"
    id "jacoco"
    id "com.gorylenko.gradle-git-properties" version "2.2.0"
    id 'com.google.cloud.tools.jib' version '1.0.2'
    id "com.google.osdetector" version "1.6.2"
    id "kr.motd.sphinx" version "2.6.1"
    id 'com.bmuschko.docker-remote-api' version '6.7.0'
}

ext {
    repoUsername = project.hasProperty("repoUsername") ? project.getProperty("repoUsername") : System.getenv("NEXUS_USERNAME")
    repoPassword = project.hasProperty("repoPassword") ? project.getProperty("repoPassword") : System.getenv("NEXUS_PASSWORD")
}



allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url 'http://dl.bintray.com/sponiro/gradle-plugins' }
        jcenter() // or Maven central, required for Lombok dependency
    }

    apply plugin: 'idea'
    apply plugin: "jacoco"
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.osdetector'

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

    // use JUnit 5 platform
    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs = [ '-parameters', '-Xlint:all', '-Xlint:-processing', '-Xlint:-serial', '-Werror']
    }

    compileTestJava {
        options.compilerArgs += '-parameters'
    }
}

subprojects {

    dependencies {
        implementation "org.apache.pulsar:pulsar-client:2.8.0-SNAPSHOT"

        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.1'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.11.1'

        implementation "io.vavr:vavr:0.10.3"

        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    }

    /*
    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
    */

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
