plugins {
    id 'java'
    id 'idea'
    id 'application'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "net.ltgt.apt-idea" version "0.20"

    id "com.dorongold.task-tree" version "1.3.1"
    id "jacoco"
    id "com.gorylenko.gradle-git-properties" version "2.2.0"
    id 'com.google.cloud.tools.jib' version '1.0.2'
    id "com.google.osdetector" version "1.6.2"
    id "kr.motd.sphinx" version "2.6.1"
}

shadowJar {
    append 'reference.conf'
    classifier = null
    version = null
    mergeServiceFiles()
}

sphinx {
    // Change the source directory.
    sourceDirectory = "${projectDir}/docs/source"
    // Change the output directory.
    outputDirectory = "${projectDir}/server/src/main/resources/docs"
    // Add environment variables.
    //environments = ['ENV_FOO': 'value1', 'ENV_BAR': 'value2']
    //env 'ENV_BAZ', 'value3'
    // Add tags.
    //tags 'tagA', 'tagB'
}


ext {
    repoUsername = project.hasProperty("repoUsername") ? project.getProperty("repoUsername") : System.getenv("NEXUS_USERNAME")
    repoPassword = project.hasProperty("repoPassword") ? project.getProperty("repoPassword") : System.getenv("NEXUS_PASSWORD")
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        jcenter() // or Maven central, required for Lombok dependency

        maven {
            name "strapdata-private"
            url "https://nexus.repo.strapdata.com/repository/maven-releases"
            credentials {
                username = repoUsername
                password = repoPassword
            }
        }
    }

    apply plugin: 'idea'
    apply plugin: "jacoco"
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.osdetector'

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        }
    }

    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

    // use JUnit 5 platform
    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs = [ '-parameters', '-Xlint:all', '-Xlint:-processing', '-Xlint:-serial', '-Werror']
    }

    compileTestJava {
        options.compilerArgs += '-parameters'
    }
}

subprojects {

    dependencies {
        implementation "org.apache.pulsar:pulsar-client:2.7.0"

        implementation group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: '3.7.0'

        implementation "com.github.ben-manes.caffeine:caffeine:2.8.5"
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.1'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.11.1'

        testCompile "org.junit.jupiter:junit-jupiter-api"
        testCompile "io.micronaut.test:micronaut-test-junit5"
        testRuntime "org.junit.jupiter:junit-jupiter-engine"
    }

    /*
    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
    */

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }


    /*
    publishing {
        publications {
            myLibrary(MavenPublication) {
                from components.java
                artifact sourcesJar
            }
        }

        repositories {
            maven {
                name = 'Nexus'
                url = "http://nexus.datapool.ml:8081/repository/ode/"
                credentials {
                    username = 'admin'
                    password = 'admin123'
                }
            }
        }
    }
    */
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
